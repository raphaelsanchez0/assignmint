

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."get_assignments_and_exams"("startdate" timestamp with time zone, "enddate" timestamp with time zone) RETURNS TABLE("date" timestamp with time zone, "type" "text")
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    RETURN QUERY
    SELECT "dueDate" AS "date", 'assignment' AS "type"
    FROM assignments
    WHERE "dueDate" BETWEEN startDate AND endDate
    UNION
    SELECT "examDate" AS "date", 'exam' AS "type"
    FROM exams
    WHERE "examDate" BETWEEN startDate AND endDate;
END; $$;


ALTER FUNCTION "public"."get_assignments_and_exams"("startdate" timestamp with time zone, "enddate" timestamp with time zone) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_events_in_range"("startdate" timestamp with time zone, "enddate" timestamp with time zone) RETURNS TABLE("date" timestamp with time zone, "type" "text")
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    RETURN QUERY
    SELECT "dueDate"::timestamp with time zone AS "date", 'assignment' AS "type"
    FROM assignments
    WHERE "dueDate" BETWEEN startDate AND endDate
    UNION
    SELECT "examDate"::timestamp with time zone AS "date", 'exam' AS "type"
    FROM exams
    WHERE "examDate" BETWEEN startDate AND endDate;
END; $$;


ALTER FUNCTION "public"."get_events_in_range"("startdate" timestamp with time zone, "enddate" timestamp with time zone) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_events_with_colors_in_range"("startdate" timestamp with time zone, "enddate" timestamp with time zone) RETURNS TABLE("date" timestamp with time zone, "type" "text", "color" "text")
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        a."dueDate"::TIMESTAMP WITH TIME ZONE AS "date", 
        'assignment' AS "type",
        c."color" AS "color"
    FROM assignments a
    JOIN courses c ON a."course_id" = c."id"
    WHERE a."dueDate" BETWEEN startDate AND endDate
    
    UNION

    SELECT 
        e."examDate"::TIMESTAMP WITH TIME ZONE AS "date", 
        'exam' AS "type",
        NULL AS "color"  -- No course color for exams
    FROM exams e
    WHERE e."examDate" BETWEEN startDate AND endDate;
END; $$;


ALTER FUNCTION "public"."get_events_with_colors_in_range"("startdate" timestamp with time zone, "enddate" timestamp with time zone) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  insert into public.profiles (id, email, full_name, avatar_url)
  values (new.id, new.email, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_user_status_to_confirmed"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
begin
IF NEW.email_confirmed_at IS NOT NULL THEN
    UPDATE public.profiles
    SET status = 'confirmed'
    WHERE id = NEW.id;
  END IF;
  RETURN NEW;
end;
$$;


ALTER FUNCTION "public"."update_user_status_to_confirmed"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."assignments" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "dueDate" "date" NOT NULL,
    "notes" "text" DEFAULT ''::"text",
    "course" "uuid" NOT NULL,
    "priority" boolean DEFAULT false NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"(),
    "imported" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."assignments" OWNER TO "postgres";


ALTER TABLE "public"."assignments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."assignments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."canvas_courses" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "assignmintID" "uuid",
    "canvasCourseID" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"(),
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);


ALTER TABLE "public"."canvas_courses" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."courses" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "color" "text" NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"(),
    "canvasCourseID" bigint,
    "canvasCourseName" "text"
);


ALTER TABLE "public"."courses" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."exams" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "examDate" "date" NOT NULL,
    "notes" "text" DEFAULT ''::"text" NOT NULL,
    "course" "uuid" NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"()
);


ALTER TABLE "public"."exams" OWNER TO "postgres";


ALTER TABLE "public"."exams" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."exams_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "full_name" "text",
    "email" "text",
    "status" "text" DEFAULT 'waiting_for_confirmation'::"text" NOT NULL,
    "avatar_url" "text"
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


ALTER TABLE ONLY "public"."assignments"
    ADD CONSTRAINT "assignments_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."canvas_courses"
    ADD CONSTRAINT "canvas_courses_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."courses"
    ADD CONSTRAINT "courses_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."exams"
    ADD CONSTRAINT "exams_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."assignments"
    ADD CONSTRAINT "assignments_course_fkey" FOREIGN KEY ("course") REFERENCES "public"."courses"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."exams"
    ADD CONSTRAINT "exams_course_fkey" FOREIGN KEY ("course") REFERENCES "public"."courses"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Enable all operations for users based on user_id" ON "public"."assignments" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable all operations for users based on user_id" ON "public"."canvas_courses" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable all operations for users based on user_id" ON "public"."courses" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable all operations for users based on user_id" ON "public"."exams" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable all operations for users based on user_id" ON "public"."profiles" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



ALTER TABLE "public"."assignments" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."canvas_courses" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."courses" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."exams" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



SET SESSION AUTHORIZATION "postgres";
RESET SESSION AUTHORIZATION;
























































































































SET SESSION AUTHORIZATION "postgres";
RESET SESSION AUTHORIZATION;



SET SESSION AUTHORIZATION "postgres";
RESET SESSION AUTHORIZATION;



SET SESSION AUTHORIZATION "postgres";
RESET SESSION AUTHORIZATION;



SET SESSION AUTHORIZATION "postgres";
RESET SESSION AUTHORIZATION;

































SET SESSION AUTHORIZATION "postgres";
RESET SESSION AUTHORIZATION;















GRANT ALL ON FUNCTION "public"."get_assignments_and_exams"("startdate" timestamp with time zone, "enddate" timestamp with time zone) TO "anon";
GRANT ALL ON FUNCTION "public"."get_assignments_and_exams"("startdate" timestamp with time zone, "enddate" timestamp with time zone) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_assignments_and_exams"("startdate" timestamp with time zone, "enddate" timestamp with time zone) TO "service_role";



GRANT ALL ON FUNCTION "public"."get_events_in_range"("startdate" timestamp with time zone, "enddate" timestamp with time zone) TO "anon";
GRANT ALL ON FUNCTION "public"."get_events_in_range"("startdate" timestamp with time zone, "enddate" timestamp with time zone) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_events_in_range"("startdate" timestamp with time zone, "enddate" timestamp with time zone) TO "service_role";



GRANT ALL ON FUNCTION "public"."get_events_with_colors_in_range"("startdate" timestamp with time zone, "enddate" timestamp with time zone) TO "anon";
GRANT ALL ON FUNCTION "public"."get_events_with_colors_in_range"("startdate" timestamp with time zone, "enddate" timestamp with time zone) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_events_with_colors_in_range"("startdate" timestamp with time zone, "enddate" timestamp with time zone) TO "service_role";



GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";



GRANT ALL ON FUNCTION "public"."update_user_status_to_confirmed"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_user_status_to_confirmed"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_user_status_to_confirmed"() TO "service_role";



























GRANT ALL ON TABLE "public"."assignments" TO "anon";
GRANT ALL ON TABLE "public"."assignments" TO "authenticated";
GRANT ALL ON TABLE "public"."assignments" TO "service_role";



GRANT ALL ON SEQUENCE "public"."assignments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."assignments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."assignments_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."canvas_courses" TO "anon";
GRANT ALL ON TABLE "public"."canvas_courses" TO "authenticated";
GRANT ALL ON TABLE "public"."canvas_courses" TO "service_role";



GRANT ALL ON TABLE "public"."courses" TO "anon";
GRANT ALL ON TABLE "public"."courses" TO "authenticated";
GRANT ALL ON TABLE "public"."courses" TO "service_role";



GRANT ALL ON TABLE "public"."exams" TO "anon";
GRANT ALL ON TABLE "public"."exams" TO "authenticated";
GRANT ALL ON TABLE "public"."exams" TO "service_role";



GRANT ALL ON SEQUENCE "public"."exams_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."exams_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."exams_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;
